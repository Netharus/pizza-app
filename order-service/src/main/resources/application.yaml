server:
  port: ${ORDER_SERVER_PORT}
spring:
  application:
    name: order-service
  config:
    import: optional:file:./docker/.env[.properties]
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${ORDER_DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
  liquibase:
    change-log: db/changelog/db.changelog-master.yaml
  cloud:
    openfeign:
      oauth2:
        enabled: true
        clientRegistrationId: keycloak
      client:
        config:
          productClient:
            url: ${PRODUCT_GATEWAY_URL}
            errorDecoder: com.modsen.orderservice.handler.CustomErrorDecoder
          userClient:
            url: ${USER_GATEWAY_URL}
            errorDecoder: com.modsen.orderservice.handler.CustomErrorDecoder

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: product-group-1
      properties:
        spring:
          json:
            type:
              mapping: ProductResponseForOrderDto:com.modsen.orderservice.dto.ProductResponseForOrderDto
            trusted:
              packages: "*"
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${KEYCLOAK_CLIENT_ID}
            client-secret: ${KEYCLOAK_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            provider: keycloak
        provider:
          keycloak:
            token-uri: ${KEYCLOAK_TOKEN_URI}
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI}
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:${EUREKA_SERVER_PORT}/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    hostname: localhost
    prefer-ip-address: true


